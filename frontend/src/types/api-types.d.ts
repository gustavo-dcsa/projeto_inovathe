/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check the credentials and return the REST Token
         *     if the credentials are valid and authenticated.
         *     Calls Django Auth login method to register User ID
         *     in Django session framework
         *
         *     Accept the following POST parameters: username, password
         *     Return the REST Framework Token Object's key. */
        post: operations["api_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django logout method and delete the Token object
         *     assigned to the current User object.
         *
         *     Accepts/Returns nothing. */
        post: operations["api_auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/password/change/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth SetPasswordForm save method.
         *
         *     Accepts the following POST parameters: new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["api_auth_password_change_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/password/reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth PasswordResetForm save method.
         *
         *     Accepts the following POST parameters: email
         *     Returns the success/fail message. */
        post: operations["api_auth_password_reset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/password/reset/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Password reset e-mail link is confirmed, therefore
         *     this resets the user's password.
         *
         *     Accepts the following POST parameters: token, uid,
         *         new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["api_auth_password_reset_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/registration/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Registers a new user.
         *
         *     Accepts the following POST parameters: username, email, password1, password2. */
        post: operations["api_auth_registration_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/registration/resend-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Resends another email to an unverified email.
         *
         *     Accepts the following POST parameter: email. */
        post: operations["api_auth_registration_resend_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/registration/verify-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verifies the email associated with the provided key.
         *
         *     Accepts the following POST parameter: key. */
        post: operations["api_auth_registration_verify_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        get: operations["api_auth_user_retrieve"];
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        put: operations["api_auth_user_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        patch: operations["api_auth_user_partial_update"];
        trace?: never;
    };
    "/api/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar eventos do calendário. */
        get: operations["api_events_list"];
        put?: never;
        /** @description ViewSet para gerenciar eventos do calendário. */
        post: operations["api_events_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar eventos do calendário. */
        get: operations["api_events_retrieve"];
        /** @description ViewSet para gerenciar eventos do calendário. */
        put: operations["api_events_update"];
        post?: never;
        /** @description ViewSet para gerenciar eventos do calendário. */
        delete: operations["api_events_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet para gerenciar eventos do calendário. */
        patch: operations["api_events_partial_update"];
        trace?: never;
    };
    "/api/feedback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar feedbacks de ideias. */
        get: operations["api_feedback_list"];
        put?: never;
        /** @description ViewSet para gerenciar feedbacks de ideias. */
        post: operations["api_feedback_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feedback/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar feedbacks de ideias. */
        get: operations["api_feedback_retrieve"];
        /** @description ViewSet para gerenciar feedbacks de ideias. */
        put: operations["api_feedback_update"];
        post?: never;
        /** @description ViewSet para gerenciar feedbacks de ideias. */
        delete: operations["api_feedback_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet para gerenciar feedbacks de ideias. */
        patch: operations["api_feedback_partial_update"];
        trace?: never;
    };
    "/api/ideas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar ideias. */
        get: operations["api_ideas_list"];
        put?: never;
        /** @description ViewSet para gerenciar ideias. */
        post: operations["api_ideas_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ideas/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar ideias. */
        get: operations["api_ideas_retrieve"];
        /** @description ViewSet para gerenciar ideias. */
        put: operations["api_ideas_update"];
        post?: never;
        /** @description ViewSet para gerenciar ideias. */
        delete: operations["api_ideas_destroy"];
        options?: never;
        head?: never;
        /**
         * Atualiza o status de uma ideia (somente admin)
         * @description Permite que um administrador atualize o status de uma ideia específica.
         */
        patch: operations["api_ideas_partial_update"];
        trace?: never;
    };
    "/api/ideas/{id}/feedback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adiciona feedback a uma ideia (somente admin)
         * @description Permite que um administrador adicione um feedback a uma ideia específica.
         */
        post: operations["api_ideas_feedback_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/likes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar likes em ideias. */
        get: operations["api_likes_list"];
        put?: never;
        /** @description ViewSet para gerenciar likes em ideias. */
        post: operations["api_likes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/likes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar likes em ideias. */
        get: operations["api_likes_retrieve"];
        /** @description ViewSet para gerenciar likes em ideias. */
        put: operations["api_likes_update"];
        post?: never;
        /** @description ViewSet para gerenciar likes em ideias. */
        delete: operations["api_likes_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet para gerenciar likes em ideias. */
        patch: operations["api_likes_partial_update"];
        trace?: never;
    };
    "/api/my-ideas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para listar as ideias do usuário autenticado. */
        get: operations["api_my_ideas_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/news/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar artigos de notícias. */
        get: operations["api_news_list"];
        put?: never;
        /** @description ViewSet para gerenciar artigos de notícias. */
        post: operations["api_news_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/news/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar artigos de notícias. */
        get: operations["api_news_retrieve"];
        /** @description ViewSet para gerenciar artigos de notícias. */
        put: operations["api_news_update"];
        post?: never;
        /** @description ViewSet para gerenciar artigos de notícias. */
        delete: operations["api_news_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet para gerenciar artigos de notícias. */
        patch: operations["api_news_partial_update"];
        trace?: never;
    };
    "/api/rsvps/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar RSVPs em eventos. */
        get: operations["api_rsvps_list"];
        put?: never;
        /** @description ViewSet para gerenciar RSVPs em eventos. */
        post: operations["api_rsvps_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rsvps/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar RSVPs em eventos. */
        get: operations["api_rsvps_retrieve"];
        /** @description ViewSet para gerenciar RSVPs em eventos. */
        put: operations["api_rsvps_update"];
        post?: never;
        /** @description ViewSet para gerenciar RSVPs em eventos. */
        delete: operations["api_rsvps_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet para gerenciar RSVPs em eventos. */
        patch: operations["api_rsvps_partial_update"];
        trace?: never;
    };
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["api_schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar usuários. */
        get: operations["api_users_list"];
        put?: never;
        /** @description ViewSet para gerenciar usuários. */
        post: operations["api_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet para gerenciar usuários. */
        get: operations["api_users_retrieve"];
        /** @description ViewSet para gerenciar usuários. */
        put: operations["api_users_update"];
        post?: never;
        /** @description ViewSet para gerenciar usuários. */
        delete: operations["api_users_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet para gerenciar usuários. */
        patch: operations["api_users_partial_update"];
        trace?: never;
    };
    "/api/users/{id}/set_role/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Define o papel de um usuário (somente admin)
         * @description Permite que um administrador defina o papel de um usuário específico.
         */
        patch: operations["api_users_set_role_partial_update"];
        trace?: never;
    };
    "/api/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Provides GET and PATCH methods for the authenticated user's profile. */
        get: operations["api_users_me_retrieve"];
        /** @description Provides GET and PATCH methods for the authenticated user's profile. */
        put: operations["api_users_me_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Provides GET and PATCH methods for the authenticated user's profile. */
        patch: operations["api_users_me_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {unknown} */
        BlankEnum: "";
        /**
         * @description * `Operadora Unimed` - Operadora Unimed
         *     * `Operadora Intermed` - Operadora Intermed
         *     * `Hospital Unimed Primavera (HUP)` - Hospital Unimed Primavera (HUP)
         *     * `Centro Integrado Ilhotas (CIS)` - Centro Integrado Ilhotas (CIS)
         *     * `Unihome` - Unihome
         *     * `Unimed Parnaíba` - Unimed Parnaíba
         *     * `Intermed Parnaíba` - Intermed Parnaíba
         *     * `TheAcolher` - TheAcolher
         * @enum {string}
         */
        BusinessUnitEnum: "Operadora Unimed" | "Operadora Intermed" | "Hospital Unimed Primavera (HUP)" | "Centro Integrado Ilhotas (CIS)" | "Unihome" | "Unimed Parnaíba" | "Intermed Parnaíba" | "TheAcolher";
        CalendarEvent: {
            readonly id: number;
            title: string;
            description: string;
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time: string;
            created_by: number;
        };
        /**
         * @description * `Baixo` - Baixo
         *     * `Médio` - Médio
         *     * `Alto` - Alto
         * @enum {string}
         */
        EstimatedImpactEnum: "Baixo" | "Médio" | "Alto";
        EventRsvp: {
            readonly id: number;
            event: number;
            user: number;
        };
        Idea: {
            readonly id: string;
            readonly likes: string;
            title: string;
            description: string;
            status?: components["schemas"]["StatusEnum"];
            stage?: components["schemas"]["StageEnum"];
            /** Format: email */
            submitted_by_email: string;
            /** Format: date-time */
            readonly created_at: string;
            full_name: string;
            submission_type: components["schemas"]["SubmissionTypeEnum"];
            team_members?: string | null;
            business_unit: components["schemas"]["BusinessUnitEnum"];
            department: string;
            position: string;
            idea_category: components["schemas"]["IdeaCategoryEnum"];
            expected_benefits: string;
            required_resources?: string | null;
            estimated_impact?: (components["schemas"]["EstimatedImpactEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            implementation_timeline?: (components["schemas"]["ImplementationTimelineEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            inspiration?: string | null;
            additional_comments?: string | null;
            is_featured?: boolean;
            current_location?: string | null;
            user?: number | null;
        };
        /**
         * @description * `Inovação de Produto/Serviço` - Inovação de Produto/Serviço
         *     * `Melhoria de Processo` - Melhoria de Processo
         *     * `Redução de Custos` - Redução de Custos
         *     * `Aumento de Produtividade` - Aumento de Produtividade
         *     * `Satisfação do Cliente` - Satisfação do Cliente
         *     * `Bem-estar dos Colaboradores` - Bem-estar dos Colaboradores
         *     * `Sustentabilidade` - Sustentabilidade
         *     * `Tecnologia` - Tecnologia
         *     * `Outro` - Outro
         * @enum {string}
         */
        IdeaCategoryEnum: "Inovação de Produto/Serviço" | "Melhoria de Processo" | "Redução de Custos" | "Aumento de Produtividade" | "Satisfação do Cliente" | "Bem-estar dos Colaboradores" | "Sustentabilidade" | "Tecnologia" | "Outro";
        IdeaFeedback: {
            readonly id: number;
            feedback_text: string;
            /** Format: date-time */
            readonly created_at: string;
            idea: string;
            author: number;
        };
        IdeaLike: {
            readonly id: number;
            idea: string;
            user: number;
        };
        /**
         * @description * `Curto prazo (até 3 meses)` - Curto prazo (até 3 meses)
         *     * `Médio prazo (3 a 6 meses)` - Médio prazo (3 a 6 meses)
         *     * `Longo prazo (mais de 6 meses)` - Longo prazo (mais de 6 meses)
         * @enum {string}
         */
        ImplementationTimelineEnum: "Curto prazo (até 3 meses)" | "Médio prazo (3 a 6 meses)" | "Longo prazo (mais de 6 meses)";
        Login: {
            username?: string;
            /** Format: email */
            email?: string;
            password: string;
        };
        NewsArticle: {
            readonly id: number;
            title: string;
            content: string;
            /** Format: uri */
            source_url?: string | null;
            /** Format: date-time */
            published_at?: string;
            created_by: number;
        };
        /** @enum {unknown} */
        NullEnum: null;
        PasswordChange: {
            new_password1: string;
            new_password2: string;
        };
        /** @description Serializer for requesting a password reset e-mail. */
        PasswordReset: {
            /** Format: email */
            email: string;
        };
        /** @description Serializer for confirming a password reset attempt. */
        PasswordResetConfirm: {
            new_password1: string;
            new_password2: string;
            uid: string;
            token: string;
        };
        PatchedCalendarEvent: {
            readonly id?: number;
            title?: string;
            description?: string;
            /** Format: date-time */
            start_time?: string;
            /** Format: date-time */
            end_time?: string;
            created_by?: number;
        };
        PatchedEventRsvp: {
            readonly id?: number;
            event?: number;
            user?: number;
        };
        PatchedIdea: {
            readonly id?: string;
            readonly likes?: string;
            title?: string;
            description?: string;
            status?: components["schemas"]["StatusEnum"];
            stage?: components["schemas"]["StageEnum"];
            /** Format: email */
            submitted_by_email?: string;
            /** Format: date-time */
            readonly created_at?: string;
            full_name?: string;
            submission_type?: components["schemas"]["SubmissionTypeEnum"];
            team_members?: string | null;
            business_unit?: components["schemas"]["BusinessUnitEnum"];
            department?: string;
            position?: string;
            idea_category?: components["schemas"]["IdeaCategoryEnum"];
            expected_benefits?: string;
            required_resources?: string | null;
            estimated_impact?: (components["schemas"]["EstimatedImpactEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            implementation_timeline?: (components["schemas"]["ImplementationTimelineEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            inspiration?: string | null;
            additional_comments?: string | null;
            is_featured?: boolean;
            current_location?: string | null;
            user?: number | null;
        };
        PatchedIdeaFeedback: {
            readonly id?: number;
            feedback_text?: string;
            /** Format: date-time */
            readonly created_at?: string;
            idea?: string;
            author?: number;
        };
        PatchedIdeaLike: {
            readonly id?: number;
            idea?: string;
            user?: number;
        };
        PatchedNewsArticle: {
            readonly id?: number;
            title?: string;
            content?: string;
            /** Format: uri */
            source_url?: string | null;
            /** Format: date-time */
            published_at?: string;
            created_by?: number;
        };
        PatchedUser: {
            readonly id?: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username?: string;
            /** Format: email */
            email?: string;
            role?: components["schemas"]["RoleEnum"];
        };
        /** @description User model w/o password */
        PatchedUserDetails: {
            /** ID */
            readonly pk?: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username?: string;
            /** Format: email */
            readonly email?: string;
            first_name?: string;
            last_name?: string;
        };
        PatchedUserProfile: {
            readonly id?: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            readonly username?: string;
            /** Format: email */
            readonly email?: string;
            first_name?: string;
            last_name?: string;
            department?: string;
            position?: string;
            /** Format: uri */
            profile_photo?: string | null;
        };
        Register: {
            username?: string;
            /** Format: email */
            email?: string;
            password: string;
            password2: string;
        };
        ResendEmailVerification: {
            /** Format: email */
            email?: string;
        };
        RestAuthDetail: {
            readonly detail: string;
        };
        /**
         * @description * `user` - Usuário
         *     * `admin` - Administrador
         * @enum {string}
         */
        RoleEnum: "user" | "admin";
        /**
         * @description * `submitted` - Submetido
         *     * `innovation_sector` - Setor de Inovação
         *     * `responsible_manager` - Gestor Responsável
         *     * `innovation_committee` - Comitê de Inovação
         *     * `board_of_directors` - Diretoria
         *     * `projects` - Projetos
         *     * `implemented` - Implementado
         * @enum {string}
         */
        StageEnum: "submitted" | "innovation_sector" | "responsible_manager" | "innovation_committee" | "board_of_directors" | "projects" | "implemented";
        /**
         * @description * `pending` - Pendente
         *     * `in_analysis` - Em Análise
         *     * `re_evaluation` - Em Reavaliação
         *     * `approved` - Aprovado
         *     * `rejected` - Rejeitado
         * @enum {string}
         */
        StatusEnum: "pending" | "in_analysis" | "re_evaluation" | "approved" | "rejected";
        /**
         * @description * `Apenas eu` - Apenas eu
         *     * `Com minha equipe` - Com minha equipe
         * @enum {string}
         */
        SubmissionTypeEnum: "Apenas eu" | "Com minha equipe";
        /** @description Serializer for Token model. */
        Token: {
            key: string;
        };
        User: {
            readonly id: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /** Format: email */
            email: string;
            role?: components["schemas"]["RoleEnum"];
        };
        /** @description User model w/o password */
        UserDetails: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /** Format: email */
            readonly email: string;
            first_name?: string;
            last_name?: string;
        };
        UserProfile: {
            readonly id: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            readonly username: string;
            /** Format: email */
            readonly email: string;
            first_name?: string;
            last_name?: string;
            department?: string;
            position?: string;
            /** Format: uri */
            profile_photo?: string | null;
        };
        VerifyEmail: {
            key: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
                "application/x-www-form-urlencoded": components["schemas"]["Login"];
                "multipart/form-data": components["schemas"]["Login"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
        };
    };
    api_auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    api_auth_password_change_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChange"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
                "multipart/form-data": components["schemas"]["PasswordChange"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    api_auth_password_reset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordReset"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
                "multipart/form-data": components["schemas"]["PasswordReset"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    api_auth_password_reset_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirm"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
                "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    api_auth_registration_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Register"];
                "application/x-www-form-urlencoded": components["schemas"]["Register"];
                "multipart/form-data": components["schemas"]["Register"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
        };
    };
    api_auth_registration_resend_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResendEmailVerification"];
                "application/x-www-form-urlencoded": components["schemas"]["ResendEmailVerification"];
                "multipart/form-data": components["schemas"]["ResendEmailVerification"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    api_auth_registration_verify_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmail"];
                "application/x-www-form-urlencoded": components["schemas"]["VerifyEmail"];
                "multipart/form-data": components["schemas"]["VerifyEmail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    api_auth_user_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetails"];
                };
            };
        };
    };
    api_auth_user_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDetails"];
                "application/x-www-form-urlencoded": components["schemas"]["UserDetails"];
                "multipart/form-data": components["schemas"]["UserDetails"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetails"];
                };
            };
        };
    };
    api_auth_user_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserDetails"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserDetails"];
                "multipart/form-data": components["schemas"]["PatchedUserDetails"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetails"];
                };
            };
        };
    };
    api_events_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarEvent"][];
                };
            };
        };
    };
    api_events_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CalendarEvent"];
                "application/x-www-form-urlencoded": components["schemas"]["CalendarEvent"];
                "multipart/form-data": components["schemas"]["CalendarEvent"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarEvent"];
                };
            };
        };
    };
    api_events_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this calendar event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarEvent"];
                };
            };
        };
    };
    api_events_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this calendar event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CalendarEvent"];
                "application/x-www-form-urlencoded": components["schemas"]["CalendarEvent"];
                "multipart/form-data": components["schemas"]["CalendarEvent"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarEvent"];
                };
            };
        };
    };
    api_events_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this calendar event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_events_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this calendar event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCalendarEvent"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCalendarEvent"];
                "multipart/form-data": components["schemas"]["PatchedCalendarEvent"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarEvent"];
                };
            };
        };
    };
    api_feedback_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaFeedback"][];
                };
            };
        };
    };
    api_feedback_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdeaFeedback"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaFeedback"];
                "multipart/form-data": components["schemas"]["IdeaFeedback"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaFeedback"];
                };
            };
        };
    };
    api_feedback_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea feedback. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaFeedback"];
                };
            };
        };
    };
    api_feedback_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea feedback. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdeaFeedback"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaFeedback"];
                "multipart/form-data": components["schemas"]["IdeaFeedback"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaFeedback"];
                };
            };
        };
    };
    api_feedback_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea feedback. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_feedback_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea feedback. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedIdeaFeedback"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedIdeaFeedback"];
                "multipart/form-data": components["schemas"]["PatchedIdeaFeedback"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaFeedback"];
                };
            };
        };
    };
    api_ideas_list: {
        parameters: {
            query?: {
                is_featured?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description * `pending` - Pendente
                 *     * `in_analysis` - Em Análise
                 *     * `re_evaluation` - Em Reavaliação
                 *     * `approved` - Aprovado
                 *     * `rejected` - Rejeitado */
                status?: "approved" | "in_analysis" | "pending" | "re_evaluation" | "rejected";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"][];
                };
            };
        };
    };
    api_ideas_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Idea"];
                "application/x-www-form-urlencoded": components["schemas"]["Idea"];
                "multipart/form-data": components["schemas"]["Idea"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"];
                };
            };
        };
    };
    api_ideas_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this idea. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"];
                };
            };
        };
    };
    api_ideas_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this idea. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Idea"];
                "application/x-www-form-urlencoded": components["schemas"]["Idea"];
                "multipart/form-data": components["schemas"]["Idea"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"];
                };
            };
        };
    };
    api_ideas_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this idea. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_ideas_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this idea. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedIdea"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedIdea"];
                "multipart/form-data": components["schemas"]["PatchedIdea"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"];
                };
            };
        };
    };
    api_ideas_feedback_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this idea. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdeaFeedback"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaFeedback"];
                "multipart/form-data": components["schemas"]["IdeaFeedback"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_likes_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaLike"][];
                };
            };
        };
    };
    api_likes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdeaLike"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaLike"];
                "multipart/form-data": components["schemas"]["IdeaLike"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaLike"];
                };
            };
        };
    };
    api_likes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaLike"];
                };
            };
        };
    };
    api_likes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdeaLike"];
                "application/x-www-form-urlencoded": components["schemas"]["IdeaLike"];
                "multipart/form-data": components["schemas"]["IdeaLike"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaLike"];
                };
            };
        };
    };
    api_likes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_likes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this idea like. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedIdeaLike"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedIdeaLike"];
                "multipart/form-data": components["schemas"]["PatchedIdeaLike"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdeaLike"];
                };
            };
        };
    };
    api_my_ideas_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Idea"][];
                };
            };
        };
    };
    api_news_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsArticle"][];
                };
            };
        };
    };
    api_news_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewsArticle"];
                "application/x-www-form-urlencoded": components["schemas"]["NewsArticle"];
                "multipart/form-data": components["schemas"]["NewsArticle"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsArticle"];
                };
            };
        };
    };
    api_news_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this news article. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsArticle"];
                };
            };
        };
    };
    api_news_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this news article. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewsArticle"];
                "application/x-www-form-urlencoded": components["schemas"]["NewsArticle"];
                "multipart/form-data": components["schemas"]["NewsArticle"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsArticle"];
                };
            };
        };
    };
    api_news_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this news article. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_news_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this news article. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNewsArticle"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedNewsArticle"];
                "multipart/form-data": components["schemas"]["PatchedNewsArticle"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsArticle"];
                };
            };
        };
    };
    api_rsvps_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRsvp"][];
                };
            };
        };
    };
    api_rsvps_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRsvp"];
                "application/x-www-form-urlencoded": components["schemas"]["EventRsvp"];
                "multipart/form-data": components["schemas"]["EventRsvp"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRsvp"];
                };
            };
        };
    };
    api_rsvps_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event rsvp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRsvp"];
                };
            };
        };
    };
    api_rsvps_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event rsvp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRsvp"];
                "application/x-www-form-urlencoded": components["schemas"]["EventRsvp"];
                "multipart/form-data": components["schemas"]["EventRsvp"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRsvp"];
                };
            };
        };
    };
    api_rsvps_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event rsvp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_rsvps_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event rsvp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEventRsvp"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedEventRsvp"];
                "multipart/form-data": components["schemas"]["PatchedEventRsvp"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRsvp"];
                };
            };
        };
    };
    api_schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_users_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    api_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_set_role_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
        };
    };
    api_users_me_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserProfile"];
                "application/x-www-form-urlencoded": components["schemas"]["UserProfile"];
                "multipart/form-data": components["schemas"]["UserProfile"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
        };
    };
    api_users_me_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserProfile"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserProfile"];
                "multipart/form-data": components["schemas"]["PatchedUserProfile"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
        };
    };
}
